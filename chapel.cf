entrypoints Program ;

position token POpenGraph ('{');
position token PCloseGraph ('}');

position token POpenParenthesis ('(');
position token PCloseParenthesis (')');

position token POpenBracket ('[');
position token PCloseBracket (']');

position token PSemicolon (';');
position token PColon (':');
position token PPoint ('.');
-- position token PComma (',');


position token PIf ({"if"});
position token PThen ({"then"});
position token PElse ({"else"});

position token Pdo {"do"};
position token PWhile {"while"};

position token PIntType ({"int"});
position token PRealType ({"real"});
position token PCharType ({"char"});
position token PBoolType ({"bool"});
position token PStringType ({"string"});

position token PBreak ({"break"});
position token PContinue ({"continue"});

position token PAssignmEq ('=') ;

position token PRef ({"ref"});

position token PVar ({"var"});


position token PProc({"proc"});

position token PReturn ({"return"});

position token PTrue ({"true"});
position token PFalse ({"false"});

position token PEpow ('^');
position token PElthen ('<');
position token PEgrthen ('>');
position token PEplus ('+');
position token PEminus ('-');
position token PEtimes ('*');
position token PEdiv ('/');
position token PEmod ('%');
position token PDef ('&');
position token PNeg ('!');
position token PElor ({"||"});
position token PEland ({"&&"});
position token PEeq ({"=="});
position token PEneq ({"!="});
position token PEle ({"<="});
position token PEge ({">="});
position token PAssignmPlus ({"+="}) ;

position token PIdent (letter (letter|digit|'_'|'\'')*) ;
position token PString ('"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"') ;
position token PChar ('\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'') ;
position token PDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PInteger (digit+) ;

comment "//" ;
comment "/*" "*/" ;

Progr.  Program ::= Module ;

Mod.    Module ::= [Ext] ;

[].       [Ext] ::= ;
-- (:[]).    [Ext] ::= Ext;
(:).      [Ext] ::= Ext [Ext];

ExtDecl.   Ext    ::= Declaration ;
ExtFun.    Ext    ::= Function ;

Decl.     Declaration ::= DecMode [DeclList] PSemicolon;
--AssgmDec.       Declaration ::= DecMode [PIdent] PAssignmEq Exp PSemicolon;
--AssgmTypeDec.       Declaration ::= DecMode [PIdent] PColon Type PAssignmEq Exp PSemicolon;

                
(:[]).    [DeclList] ::= DeclList;
(:).      [DeclList] ::= DeclList "," [DeclList];

NoAssgmArrayDec.     DeclList ::= [PIdent] PColon TypeSpec ;
AssgmTypeDec.        DeclList ::= [PIdent] PColon TypeSpec AssgnmOp ExprDecl ;
AssgmDec.            DeclList ::= [PIdent] AssgnmOp ExprDecl ;

TypeSpecNorm.        TypeSpec ::= Type;
TypeSpecAr.          TypeSpec ::= ArDecl Type;


ExprDecArray.        ExprDecl ::= ArInit;
ExprDec.             ExprDecl ::= Exp;

ArrayInit.           ArInit ::= POpenBracket [ExprDecl] PCloseBracket;

(:[]).    [ExprDecl] ::= ExprDecl;
(:).      [ExprDecl] ::= ExprDecl "," [ExprDecl];

ArrayDeclIndex.      ArDecl ::= POpenBracket [ArDim] PCloseBracket ;

ArrayDimSingle.      ArDim ::= ArBound PPoint PPoint ArBound;
ArrayDimBound.       ArDim ::= ArBound;


(:[]).    [ArDim] ::= ArDim;
(:).      [ArDim] ::= ArDim "," [ArDim];


ArrayBoundIdent.     ArBound ::= PIdent ;
ArratBoundConst.     ArBound ::= Constant ;

(:[]).    [PIdent] ::= PIdent;
(:).      [PIdent] ::= PIdent "," [PIdent];

PVarMode.   DecMode ::= PVar ;




FunDec.       Function ::= PProc Signature Body ;

-- procedure structure
SignNoRet.           Signature ::= PIdent FunctionParams ;
SignWRet.            Signature ::= PIdent FunctionParams PColon TypeSpec;


FunParams.      FunctionParams ::= POpenParenthesis [Param] PCloseParenthesis ;

[].       [Param] ::= ;
(:[]).    [Param] ::= Param;
(:).      [Param] ::= Param "," [Param];


-- parameters of procedures
ParNoMode.     Param ::= [PIdent] PColon TypeSpec ;
ParWMode.      Param  ::= Mode [PIdent] PColon TypeSpec ;


[].       [PassedParam] ::= ;
(:[]).    [PassedParam] ::= PassedParam;
(:).      [PassedParam] ::= PassedParam "," [PassedParam];


-- parameters of procedures
PassedPar.      PassedParam ::= Exp ;
PassedParWMode. PassedParam ::= Mode Exp ;
-- ParWMode.      PassedParam  ::= Mode [PIdent] PColon Type ;

BodyBlock.       Body ::= POpenGraph [BodyStatement] PCloseGraph ;

[].       [BodyStatement] ::= ;
(:).      [BodyStatement] ::= BodyStatement [BodyStatement];

Stm.       BodyStatement  ::= Statement ;
Fun.       BodyStatement  ::= Function PSemicolon ;
DeclStm.   BodyStatement  ::= Declaration ;
Block.     BodyStatement  ::= Body ;

DoWhile.   Statement      ::= Pdo Body PWhile Guard ;
While.     Statement      ::= PWhile Guard Body ;

If.        Statement      ::= PIf Guard PThen Body ;
IfElse.    Statement      ::= PIf Guard PThen Body PElse Body;

RetVal.    Statement  ::= PReturn Exp PSemicolon ;
RetVoid.   Statement  ::= PReturn PSemicolon ;

Continue.  Statement  ::= PContinue PSemicolon;
Break.     Statement  ::= PBreak PSemicolon;

StExp.     Statement      ::= Exp PSemicolon;

SGuard.    Guard          ::= POpenParenthesis Exp PCloseParenthesis ;     

Tint.      Type ::= PIntType ;
Treal.     Type ::= PRealType ;
Tchar.     Type ::= PCharType ;
Tstring.   Type ::= PStringType ;
Tbool.     Type ::= PBoolType ;
TPointer.  Type ::= PEtimes TypeSpec;

AssgnEq.   AssgnmOp ::= PAssignmEq ;
AssgnPlEq. AssgnmOp ::= PAssignmPlus ;

RefMode.   Mode ::= PRef ;


EAss.        Exp ::= Exp AssgnmOp Exp1;
Elor.        Exp1  ::= Exp1 PElor Exp2;
Eland.       Exp2  ::= Exp2 PEland Exp3;
Eeq.         Exp3  ::= Exp3 PEeq Exp4;
Eneq.        Exp3  ::= Exp3 PEneq Exp4;
Elthen.      Exp4 ::= Exp4 PElthen Exp5;
Egrthen.     Exp4 ::= Exp4 PEgrthen Exp5;
Ele.         Exp4 ::= Exp4 PEle Exp5;
Ege.         Exp4 ::= Exp4 PEge Exp5;
Eplus.       Exp5 ::= Exp5 PEplus Exp6;
Eminus.      Exp5 ::= Exp5 PEminus Exp6;
Etimes.      Exp6 ::= Exp6 PEtimes Exp7;
Ediv.        Exp6 ::= Exp6 PEdiv Exp7;
Emod.        Exp6 ::= Exp6 PEmod Exp7;
Epreop.      Exp7 ::= UnaryOperator Exp7;
Epow.        Exp8 ::= Exp8 PEpow Exp9;
Earray.      Exp8 ::= Exp9 ArInit ;
EifExp.      Exp9 ::= PIf Guard PThen Exp9 PElse Exp9;

--position token PIff ({"iff"});
--position token PThenn ({"thenn"});
--position token PElsee ({"elsee"});


_. Exp  ::= Exp1 ;
_. Exp1 ::= Exp2 ;
_. Exp2 ::= Exp3 ;
_. Exp3 ::= Exp4 ;
_. Exp4 ::= Exp5 ;
_. Exp5 ::= Exp6 ;
_. Exp6 ::= Exp7 ;
_. Exp7 ::= Exp8 ;
_. Exp8 ::= Exp9 ;
_. Exp9 ::= Exp10 ;
-- _. Exp10 ::= Exp11 ;
-- coercions Exp 9;
InnerExp. Exp10 ::= POpenParenthesis Exp PCloseParenthesis ;

Negation.      UnaryOperator ::= PNeg ;
MinusUnary.         UnaryOperator ::= PEminus ;
Address.      UnaryOperator ::= PDef ;
Indirection.  UnaryOperator ::= PEtimes ;

EFun.        Exp10 ::= PIdent POpenParenthesis [PassedParam] PCloseParenthesis ;
Evar.        Exp10 ::= PIdent; 
Econst.      Exp10 ::= Constant;
 
Estring.       Constant ::= PString;
Efloat.        Constant ::= PDouble;
Echar.         Constant ::= PChar;
Eint.          Constant ::= PInteger;
ETrue.         Constant ::= PTrue;
EFalse.        Constant ::= PFalse;