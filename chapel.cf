entrypoints Program ;

position token POpenGraph ('{');
position token PCloseGraph ('}');

position token POpenParenthesis ('(');
position token PCloseParenthesis (')');

position token POpenBracket ('[');
position token PCloseBracket (']');

position token PSemicolon (';');
position token PColon (':');
position token PPoint ('.');
-- position token PComma (',');


position token PIf ({"if"});
position token PThen ({"then"});
position token PElse ({"else"});

position token Pdo {"do"};
position token PWhile {"while"};

position token PInt ({"int"});
position token PReal ({"real"});

position token PAssignmEq ('=') ;
position token PAssignmPlus ({"+="}) ;

position token PRef ({"ref"});

position token PVar ({"var"});
position token PConst ({"const"});

position token PProc({"proc"});

position token PReturn ({"return"});

position token PElthen ('<');
position token PEgrthen ('>');
position token PEplus ('+');
position token PEminus ('-');
position token PEtimes ('*');
position token PEdiv ('/');
position token PEmod ('%');
position token PDef ('&');
position token PElor ({"||"});
position token PEland ({"&&"});
position token PEeq ({"=="});
position token PEneq ({"!="});
position token PEle ({"<="});
position token PEge ({">="});


position token PIdent (letter (letter|digit|'_'|'\'')*) ;
position token PString ('"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"') ;
position token PChar ('\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'') ;
position token PDouble (digit+ '.' digit+ ('e' '-'? digit+)?) ;
position token PInteger (digit+) ;


Progr.  Program ::= Module ;

Mod.    Module ::= [Ext] ;

[].       [Ext] ::= ;
-- (:[]).    [Ext] ::= Ext;
(:).      [Ext] ::= Ext [Ext];

ExtDecl.   Ext    ::= Declaration ;
ExtFun.    Ext    ::= Function ;

Decl.     Declaration ::= DecMode [DeclList] PSemicolon;
--AssgmDec.       Declaration ::= DecMode [PIdent] PAssignmEq Exp PSemicolon;
--AssgmTypeDec.       Declaration ::= DecMode [PIdent] PColon Type PAssignmEq Exp PSemicolon;

                
(:[]).    [DeclList] ::= DeclList;
(:).      [DeclList] ::= DeclList "," [DeclList];

NoAssgmDec.          DeclList ::= [PIdent] PColon Type ;
NoAssgmArrayFixDec.  DeclList ::= [PIdent] PColon ArDecl ;
NoAssgmArrayDec.     DeclList ::= [PIdent] PColon ArDecl Type ;
AssgmTypeDec.        DeclList ::= [PIdent] PColon Type PAssignmEq Exp ;
AssgmArrayTypeDec.   DeclList ::= [PIdent] PColon ArDecl Type PAssignmEq Exp ;
AssgmArrayDec.       DeclList ::= [PIdent] PColon ArDecl PAssignmEq Exp ;
AssgmDec.            DeclList ::= [PIdent] PAssignmEq Exp ;


ArrayDeclIndex.      ArDecl ::= POpenBracket [ArDim] PCloseBracket ;
ArrayDeclFixed.      ArDecl ::= POpenBracket ArBound PCloseBracket ;

ArrayDimSingle.      ArDim ::= ArBound PPoint PPoint ArBound;


(:[]).    [ArDim] ::= ArDim;
(:).      [ArDim] ::= ArDim "," [ArDim];


ArrayBoundIdent.     ArBound ::= PIdent ;
ArratBoundConst.     ArBound ::= Constant ;

(:[]).    [PIdent] ::= PIdent;
(:).      [PIdent] ::= PIdent "," [PIdent];

PVarMode.   DecMode ::= PVar ;
PConstMode.   DecMode ::= PConst ;



FunDec.       Function ::= PProc Signature Body ;

-- procedure structure
SignNoRet.            Signature ::= PIdent FunctionParams ;
SignWRet.            Signature ::= PIdent FunctionParams PColon Type;


FunParams.      FunctionParams ::= POpenParenthesis [Param] PCloseParenthesis ;

[].       [Param] ::= ;
(:[]).    [Param] ::= Param;
(:).      [Param] ::= Param "," [Param];


-- parameters of procedures
ParNoMode.     Param ::= [PIdent] PColon Type ;
ParWMode.      Param  ::= Mode [PIdent] PColon Type ;

FunBlock.       Body ::= POpenGraph [BodyStatement] PCloseGraph ;

[].       [BodyStatement] ::= ;
(:).      [BodyStatement] ::= BodyStatement [BodyStatement];

Stm.       BodyStatement  ::= Statement ;
Fun.       BodyStatement  ::= Function PSemicolon ;
DeclStm.   BodyStatement  ::= Declaration ;
Block.     BodyStatement  ::= Body ;

DoWhile.   Statement      ::= Pdo PWhile Body Guard ;
While.     Statement      ::= PWhile Guard Body ;

If.        Statement      ::= PIf Guard PThen Body ;
IfElse.    Statement      ::= PIf Guard PThen Body PElse Body;

RetVal.    Statement  ::= PReturn Exp PSemicolon ;
RetVoid.   Statement  ::= PReturn PSemicolon ;


StExp.     Statement      ::= Exp PSemicolon;

SGuard.    Guard          ::= POpenParenthesis Exp PCloseParenthesis ;     

Tint.      Type ::= PInt ;
Treal.     Type ::= PReal ;

AssgnEq.   AssgnmOp ::= PAssignmEq ;
AssgnPlEq. AssgnmOp ::= PAssignmPlus ;

RefMode.   Mode ::= PRef ;


EAss.        Exp ::= Exp AssgnmOp Exp4;
Elor.        Exp4  ::= Exp4 PElor Exp5;
Eland.       Exp5  ::= Exp5 PEland Exp8;
Ebitand.     Exp8  ::= Exp8 PDef Exp9;
Eeq.         Exp9  ::= Exp9 PEeq Exp10;
Eneq.        Exp9  ::= Exp9 PEneq Exp10;
Elthen.      Exp10 ::= Exp10 PElthen Exp11;
Egrthen.     Exp10 ::= Exp10 PEgrthen Exp11;
Ele.         Exp10 ::= Exp10 PEle Exp11;
Ege.         Exp10 ::= Exp10 PEge Exp12;
Eplus.       Exp12 ::= Exp12 PEplus Exp13;
Eminus.      Exp12 ::= Exp12 PEminus Exp13;
Etimes.      Exp13 ::= Exp13 PEtimes Exp14;
Ediv.        Exp13 ::= Exp13 PEdiv Exp14;
Emod.        Exp13 ::= Exp13 PEmod Exp14;

_. Exp  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
InnerExp. Exp14 ::= POpenParenthesis Exp PCloseParenthesis ;


Evar.        Exp14 ::= PIdent;
Econst.      Exp14 ::= Constant;
Estring.     Exp14 ::= PString;

Efloat.        Constant ::= PDouble;
Echar.         Constant ::= PChar;
Eint.          Constant ::= PInteger;