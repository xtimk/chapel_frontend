module SkelChapel where

-- Haskell module generated by the BNF converter

import AbsChapel
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Progr module_ -> failure x
transModule :: Module -> Result
transModule x = case x of
  Mod exts -> failure x
transExt :: Ext -> Result
transExt x = case x of
  ExtDecl declaration -> failure x
  ExtFun function -> failure x
transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  NoAssgmDec type_ id -> failure x
  AssgmDec type_ id assgnmop exp -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  FunDec signature body -> failure x
transSignature :: Signature -> Result
transSignature x = case x of
  Sign type_ id functionparams -> failure x
transFunctionParams :: FunctionParams -> Result
transFunctionParams x = case x of
  FunParams params -> failure x
transParam :: Param -> Result
transParam x = case x of
  ParNoMode type_ id -> failure x
  ParWMode mode type_ id -> failure x
transBody :: Body -> Result
transBody x = case x of
  FunBlock bodystatements -> failure x
transBodyStatement :: BodyStatement -> Result
transBodyStatement x = case x of
  Stm statement -> failure x
  Fun function -> failure x
  Decl declaration -> failure x
  Block body -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  DoWhile body guard -> failure x
transGuard :: Guard -> Result
transGuard x = case x of
  SGuard exp -> failure x
transType :: Type -> Result
transType x = case x of
  Tint -> failure x
transId :: Id -> Result
transId x = case x of
  Tid ident -> failure x
transAssgnmOp :: AssgnmOp -> Result
transAssgnmOp x = case x of
  AssgnEq -> failure x
  AssgnPlEq -> failure x
transMode :: Mode -> Result
transMode x = case x of
  RefMode -> failure x
transExp :: Exp -> Result
transExp x = case x of
  Elor exp1 exp2 -> failure x
  Eland exp1 exp2 -> failure x
  Ebitor exp1 exp2 -> failure x
  Ebitexor exp1 exp2 -> failure x
  Ebitand exp1 exp2 -> failure x
  Eeq exp1 exp2 -> failure x
  Eneq exp1 exp2 -> failure x
  Elthen exp1 exp2 -> failure x
  Egrthen exp1 exp2 -> failure x
  Ele exp1 exp2 -> failure x
  Ege exp1 exp2 -> failure x
  Eleft exp1 exp2 -> failure x
  Eright exp1 exp2 -> failure x
  Eplus exp1 exp2 -> failure x
  Eminus exp1 exp2 -> failure x
  Etimes exp1 exp2 -> failure x
  Ediv exp1 exp2 -> failure x
  Emod exp1 exp2 -> failure x
  Evar ident -> failure x
  Econst constant -> failure x
  Estring string -> failure x
transConstant :: Constant -> Result
transConstant x = case x of
  Efloat double -> failure x
  Echar char -> failure x
  Eint integer -> failure x

