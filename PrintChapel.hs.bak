{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintChapel.
--   Generated by the BNF converter.

module PrintChapel where

import qualified AbsChapel
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsChapel.Ident where
  prt _ (AbsChapel.Ident i) = doc (showString i)

instance Print AbsChapel.Program where
  prt i e = case e of
    AbsChapel.Progr module_ -> prPrec i 0 (concatD [prt 0 module_])

instance Print AbsChapel.Module where
  prt i e = case e of
    AbsChapel.Mod exts -> prPrec i 0 (concatD [prt 0 exts])

instance Print [AbsChapel.Ext] where
  prt = prtList

instance Print AbsChapel.Ext where
  prt i e = case e of
    AbsChapel.ExtDecl declaration -> prPrec i 0 (concatD [prt 0 declaration])
    AbsChapel.ExtFun function -> prPrec i 0 (concatD [prt 0 function])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsChapel.Declaration where
  prt i e = case e of
    AbsChapel.NoAssgmDec type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString ";")])
    AbsChapel.AssgmDec type_ id assgnmop exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, prt 0 assgnmop, prt 0 exp, doc (showString ";")])

instance Print AbsChapel.Function where
  prt i e = case e of
    AbsChapel.FunDec signature body -> prPrec i 0 (concatD [prt 0 signature, prt 0 body])

instance Print AbsChapel.Signature where
  prt i e = case e of
    AbsChapel.Sign type_ id functionparams -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, prt 0 functionparams])

instance Print AbsChapel.FunctionParams where
  prt i e = case e of
    AbsChapel.FunParams params -> prPrec i 0 (concatD [doc (showString "("), prt 0 params, doc (showString ")")])

instance Print [AbsChapel.Param] where
  prt = prtList

instance Print AbsChapel.Param where
  prt i e = case e of
    AbsChapel.ParNoMode type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    AbsChapel.ParWMode mode type_ id -> prPrec i 0 (concatD [prt 0 mode, prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsChapel.Body where
  prt i e = case e of
    AbsChapel.FunBlock bodystatements -> prPrec i 0 (concatD [doc (showString "{"), prt 0 bodystatements, doc (showString "}")])

instance Print [AbsChapel.BodyStatement] where
  prt = prtList

instance Print AbsChapel.BodyStatement where
  prt i e = case e of
    AbsChapel.Stm statement -> prPrec i 0 (concatD [prt 0 statement])
    AbsChapel.Fun function -> prPrec i 0 (concatD [prt 0 function, doc (showString ";")])
    AbsChapel.Decl declaration -> prPrec i 0 (concatD [prt 0 declaration])
    AbsChapel.Block body -> prPrec i 0 (concatD [prt 0 body])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsChapel.Statement where
  prt i e = case e of
    AbsChapel.DoWhile guard -> prPrec i 0 (concatD [doc (showString "do"), doc (showString "while"), prt 0 guard])

instance Print AbsChapel.Guard where
  prt i e = case e of
    AbsChapel.SGuard exp -> prPrec i 0 (concatD [doc (showString "("), prt 0 exp, doc (showString ")")])

instance Print AbsChapel.Type where
  prt i e = case e of
    AbsChapel.Tint -> prPrec i 0 (concatD [doc (showString "int")])

instance Print AbsChapel.Id where
  prt i e = case e of
    AbsChapel.Tid id -> prPrec i 0 (concatD [prt 0 id])

instance Print AbsChapel.AssgnmOp where
  prt i e = case e of
    AbsChapel.AssgnEq -> prPrec i 0 (concatD [doc (showString "=")])
    AbsChapel.AssgnPlEq -> prPrec i 0 (concatD [doc (showString "+=")])

instance Print AbsChapel.Mode where
  prt i e = case e of
    AbsChapel.RefMode -> prPrec i 0 (concatD [doc (showString "ref")])

instance Print AbsChapel.Exp where
  prt i e = case e of
    AbsChapel.Elor exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "||"), prt 5 exp2])
    AbsChapel.Eland exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "&&"), prt 6 exp2])
    AbsChapel.Ebitor exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "|"), prt 7 exp2])
    AbsChapel.Ebitexor exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "^"), prt 8 exp2])
    AbsChapel.Ebitand exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "&"), prt 9 exp2])
    AbsChapel.Eeq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "=="), prt 10 exp2])
    AbsChapel.Eneq exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString "!="), prt 10 exp2])
    AbsChapel.Elthen exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<"), prt 11 exp2])
    AbsChapel.Egrthen exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">"), prt 11 exp2])
    AbsChapel.Ele exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<="), prt 11 exp2])
    AbsChapel.Ege exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">="), prt 11 exp2])
    AbsChapel.Eleft exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "<<"), prt 12 exp2])
    AbsChapel.Eright exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString ">>"), prt 12 exp2])
    AbsChapel.Eplus exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "+"), prt 13 exp2])
    AbsChapel.Eminus exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "-"), prt 13 exp2])
    AbsChapel.Etimes exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "*"), prt 14 exp2])
    AbsChapel.Ediv exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "/"), prt 14 exp2])
    AbsChapel.Emod exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "%"), prt 14 exp2])
    AbsChapel.Evar id -> prPrec i 14 (concatD [prt 0 id])
    AbsChapel.Econst constant -> prPrec i 14 (concatD [prt 0 constant])
    AbsChapel.Estring str -> prPrec i 14 (concatD [prt 0 str])

instance Print AbsChapel.Constant where
  prt i e = case e of
    AbsChapel.Efloat d -> prPrec i 0 (concatD [prt 0 d])
    AbsChapel.Echar c -> prPrec i 0 (concatD [prt 0 c])
    AbsChapel.Eint n -> prPrec i 0 (concatD [prt 0 n])

