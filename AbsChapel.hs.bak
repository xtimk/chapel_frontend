-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsChapel where

newtype POpenGraph = POpenGraph ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PCloseGraph = PCloseGraph ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PSemicolon = PSemicolon ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PIdent = PIdent ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PString = PString ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PChar = PChar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PDouble = PDouble ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PInteger = PInteger ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PAssignmEq = PAssignmEq ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype PAssignmPlus = PAssignmPlus ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

data Program = Progr Module
  deriving (Eq, Ord, Show, Read)

data Module = Mod [Ext]
  deriving (Eq, Ord, Show, Read)

data Ext = ExtDecl Declaration | ExtFun Function
  deriving (Eq, Ord, Show, Read)

data Declaration
    = NoAssgmDec Type PIdent PSemicolon
    | AssgmDec Type PIdent AssgnmOp Exp PSemicolon
  deriving (Eq, Ord, Show, Read)

data Function = FunDec Signature Body
  deriving (Eq, Ord, Show, Read)

data Signature = Sign Type PIdent FunctionParams
  deriving (Eq, Ord, Show, Read)

data FunctionParams = FunParams [Param]
  deriving (Eq, Ord, Show, Read)

data Param = ParNoMode Type PIdent | ParWMode Mode Type PIdent
  deriving (Eq, Ord, Show, Read)

data Body = FunBlock POpenGraph [BodyStatement] PCloseGraph
  deriving (Eq, Ord, Show, Read)

data BodyStatement
    = Stm Statement
    | Fun Function PSemicolon
    | Decl Declaration
    | Block Body
  deriving (Eq, Ord, Show, Read)

data Statement = DoWhile Body Guard | StExp Exp PSemicolon
  deriving (Eq, Ord, Show, Read)

data Guard = SGuard Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tint
  deriving (Eq, Ord, Show, Read)

data AssgnmOp = AssgnEq PAssignmEq | AssgnPlEq PAssignmPlus
  deriving (Eq, Ord, Show, Read)

data Mode = RefMode
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAss Exp AssgnmOp Exp
    | Elor Exp Exp
    | Eland Exp Exp
    | Ebitor Exp Exp
    | Ebitexor Exp Exp
    | Ebitand Exp Exp
    | Eeq Exp Exp
    | Eneq Exp Exp
    | Elthen Exp Exp
    | Egrthen Exp Exp
    | Ele Exp Exp
    | Ege Exp Exp
    | Eleft Exp Exp
    | Eright Exp Exp
    | Eplus Exp Exp
    | Eminus Exp Exp
    | Etimes Exp Exp
    | Ediv Exp Exp
    | Emod Exp Exp
    | Evar PIdent
    | Econst Constant
    | Estring PString
  deriving (Eq, Ord, Show, Read)

data Constant = Efloat PDouble | Echar PChar | Eint PInteger
  deriving (Eq, Ord, Show, Read)

