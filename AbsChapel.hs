-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsChapel where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Progr Module
  deriving (Eq, Ord, Show, Read)

data Module = Mod [Ext]
  deriving (Eq, Ord, Show, Read)

data Ext = ExtDecl Declaration | ExtFun Function
  deriving (Eq, Ord, Show, Read)

data Declaration
    = NoAssgmDec Type Id | AssgmDec Type Id AssgnmOp Exp
  deriving (Eq, Ord, Show, Read)

data Function = FunDec Signature Body
  deriving (Eq, Ord, Show, Read)

data Signature = Sign Type Id FunctionParams
  deriving (Eq, Ord, Show, Read)

data FunctionParams = FunParams [Param]
  deriving (Eq, Ord, Show, Read)

data Param = ParNoMode Type Id | ParWMode Mode Type Id
  deriving (Eq, Ord, Show, Read)

data Body = FunBlock [BodyStatement]
  deriving (Eq, Ord, Show, Read)

data BodyStatement
    = Stm Statement | Fun Function | Decl Declaration | Block Body
  deriving (Eq, Ord, Show, Read)

data Statement = DoWhile Body Guard
  deriving (Eq, Ord, Show, Read)

data Guard = SGuard Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tint
  deriving (Eq, Ord, Show, Read)

data Id = Tid Ident
  deriving (Eq, Ord, Show, Read)

data AssgnmOp = AssgnEq | AssgnPlEq
  deriving (Eq, Ord, Show, Read)

data Mode = RefMode
  deriving (Eq, Ord, Show, Read)

data Exp
    = Elor Exp Exp
    | Eland Exp Exp
    | Ebitor Exp Exp
    | Ebitexor Exp Exp
    | Ebitand Exp Exp
    | Eeq Exp Exp
    | Eneq Exp Exp
    | Elthen Exp Exp
    | Egrthen Exp Exp
    | Ele Exp Exp
    | Ege Exp Exp
    | Eleft Exp Exp
    | Eright Exp Exp
    | Eplus Exp Exp
    | Eminus Exp Exp
    | Etimes Exp Exp
    | Ediv Exp Exp
    | Emod Exp Exp
    | Evar Ident
    | Econst Constant
    | Estring String
  deriving (Eq, Ord, Show, Read)

data Constant = Efloat Double | Echar Char | Eint Integer
  deriving (Eq, Ord, Show, Read)

